----------------------------------------------------------------
-- Daan Leijen (c) 2001
--
-- $Revision$
-- $Author$
-- $Date$
----------------------------------------------------------------
module LvmException( Exception(..), RuntimeException(..), SystemException(..)
                   , ArithmeticException(..), SignalException(..)
                   , catch, raise, error, errorPacked, patternFail, patternFailPacked
                   ) where

import IridiumLang(''_$helium_runtime_error'' )
import LvmLang

instruction primCatch "catch" :: (Exception -> v$0) -> v$0 -> v$0
instruction primRaise "raise" :: Exception! -> v$0

{----------------------------------------------------------
  Exception and Signals
----------------------------------------------------------}
data Exception
  = HeapOverflow                            -- heap overflow
  | StackOverflow     Int                   -- stack overflow
  | Signal            SignalException       -- interrupt occurred
  | Runtime           RuntimeException      -- runtime system exception
  | Arithmetic        ArithmeticException   -- arithmetic exception
  | System            SystemException       -- operating system exceptions
  | InvalidArgument   String          -- invalid argument passed
  | Assert            String          -- assertion failed
  | NotFound                                -- no object is found
  | UserError         String          -- general failure (raised by "error")

data RuntimeException
  = PatternFailure    String          -- pattern match failure
  | NonTermination    String          -- non terminating program
  | OutOfBounds       String          -- field access out of bounds                
  | Exit              Int                   -- exiting program
  | InvalidOpcode     Int                   -- invalid opcode
  | LoadError         String String -- runtime loader exception
  | RuntimeError      String          -- general failure

data SystemException
  = EndOfFile                               -- end of input reached
  | BlockedOnIO                             -- blocked I/O channel
  | SystemError       Int String      -- general system error

data ArithmeticException
  = FloatInvalid                      -- float invalid operation
  | FloatDivideByZero                 -- float division by zero
  | FloatOverflow                     -- float has overflowed
  | FloatUnderflow                    -- float has underflowed
  | FloatInexact                      -- float result is inexact
  | FloatDenormal                     -- denormalized float value
  | DivideByZero                      -- integer division by zero
  | Overflow                          -- integer overflow
  | Underflow                         -- integer underflow
  | InvalidOperation                  -- general arithmetic error
  | UnEmulated                        -- cannot emulate float instruction
  | NegativeSquareRoot                -- square root of negative number
  | FloatStackOverflow                -- float hardware stack has overflowed
  | FloatStackUnderflow               -- float hardware stack has underflowed

data SignalException
  = SignalNone                        -- runtime: no signal
  | SignalGarbageCollect              -- runtime: GC needed
  | SignalYield                       -- runtime: thread should yield
  | SignalLost                        -- runtime: lost signal
  | SignalKeyboard                    -- interactive interrupt (ctrl-c)
  | SignalKeyboardStop                -- interactive stop (ctrl-break)
  | SignalFloatException              -- floating point exception
  | SignalSegmentationViolation       -- invalid memory reference
  | SignalIllegalInstruction          -- illegal hardware instruction
  | SignalAbort                       -- abnormal termination
  | SignalTerminate                   -- termination
  | SignalKill                        -- termination (can not be ignored)
  | SignalKeyboardTerminate           -- interactive termination
  | SignalAlarm                       -- timeout
  | SignalVirtualAlarm                -- timeout in virtual time
  | SignalBackgroundRead              -- terminal read from background process
  | SignalBackgroundWrite             -- terminal write from background process
  | SignalContinue                    -- continue process
  | SignalLostConnection              -- connection lost
  | SignalBrokenPipe                  -- open ended pipe
  | SignalProcessStatusChanged        -- child process terminated
  | SignalStop                        -- stop process
  | SignalProfiler                    -- profiling interrupt
  | SignalUser1                       -- application defined signal 1
  | SignalUser2                       -- application defined signal 2


{----------------------------------------------------------
  raise and catch
----------------------------------------------------------}
{- raise :: Exception -> a
raise exn
  = let! exn = exn in primRaise exn

catch :: IO a -> (Exception -> IO a) -> IO a
catch action handler
  = \_ -> primCatch (\exn -> handler exn ()) (action ()) -}

{----------------------------------------------------------
  user errors
----------------------------------------------------------}
error :: forall v$0. [Char] -> v$0
error = forall v$0. \msg: [Char] -> ''_$helium_runtime_error'' {v$0} msg
  -- = let! s = (packedFromString msg) in raise (UserError s)

errorPacked :: forall v$0. [Char] -> v$0
errorPacked = forall v$0. \msg: [Char] -> error {v$0} msg
  -- = raise (UserError msg)

patternFail :: forall v$0. [Char] -> v$0
patternFail = forall v$0. \msg: [Char] -> error {v$0} msg
  {- = let! s   = packedFromString msg
         exn = PatternFailure s
    in raise (Runtime exn) -}

patternFailPacked :: forall v$0. [Char] -> v$0
patternFailPacked = forall v$0. \msg: [Char] -> error {v$0} msg
  {- = let! exn = PatternFailure msg
    in raise (Runtime exn) -}
