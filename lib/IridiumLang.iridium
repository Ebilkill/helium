module IridiumLang
import (IridiumLangEval, IridiumLangString)

export declare @_$helium_runtime_error: (any) -> any_whnf
export declare @_$helium_runtime_print_string: (@"[]") -> int

#[decl @kind [bytes "* -> *"]]
custom @"[]": @data

#[decl @kind [bytes "* -> *"]]
data @"[]" {
  #[decl @type [bytes "[a]"]]
  #[link @"[]" @data]
  constructor @"[]"()

  #[decl @type [bytes "a -> [a] -> [a]"]]
  #[link @"[]" @data]
  constructor @":"(any, any)
}

#[decl @kind [bytes "*"]]
export data @Bool {
  #[decl @type [bytes "Bool"]]
  #[link @Bool @data]
  export constructor @False()

  #[decl @type [bytes "Bool"]]
  #[link @Bool @data]
  export constructor @True()
}

#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primAddInt(%a: int, %b: int) = prim int_add(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primSubInt(%a: int, %b: int) = prim int_sub(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primMulInt(%a: int, %b: int) = prim int_mul(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primQuotInt(%a: int, %b: int) = prim int_sdiv(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primRemInt(%a: int, %b: int) = prim int_srem(%a: int, %b: int)
; TODO: Are div and mod (rounding to -inf) available in LLVM?

#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primAndInt(%a: int, %b: int) = prim int_and(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primOrInt(%a: int, %b: int) = prim int_or(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primXorInt(%a: int, %b: int) = prim int_xor(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primShrInt(%a: int, %b: int) = prim int_ashr(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primShrNat(%a: int, %b: int) = prim int_lshr(%a: int, %b: int)
#[decl @iridiumtype [bytes "(int, int) -> int"]]
export define @primShlInt(%a: int, %b: int) = prim int_shl(%a: int, %b: int)

#[decl @iridiumtype [bytes "(int) -> int"]]
export define @primNegInt(%a: int): int {
entry:
  %0 = literal int 0
  %result = prim int_sub(%0: int, %a: int)
  return %result: int
}

#[decl @iridiumtype [bytes "(int, int) -> @Bool"]]
export define @primEqInt(%a: int, %b: int): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim int_eq(%a: int, %b: int, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(int, int) -> @Bool"]]
export define @primNeInt(%a: int, %b: int): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim int_eq(%a: int, %b: int, %false: any_whnf, %true: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(int, int) -> @Bool"]]
export define @primLtInt(%a: int, %b: int): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim int_slt(%a: int, %b: int, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(int, int) -> @Bool"]]
export define @primGeInt(%a: int, %b: int): @Bool { ; a >= b <=> not(a < b)
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim int_slt(%a: int, %b: int, %false: any_whnf, %true: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(int, int) -> @Bool"]]
export define @primLeInt(%a: int, %b: int) = call @primGeInt: (int, int) -> @Bool $ (%b: int, %a: int)
#[decl @iridiumtype [bytes "(int, int) -> @Bool"]]
export define @primGtInt(%a: int, %b: int) = call @primLtInt: (int, int) -> @Bool $ (%b: int, %a: int)

#[decl @iridiumtype [bytes "(float64, float64) -> float64"]]
export define @primAddFloat(%a: float64, %b: float64) = prim float64_add(%a: float64, %b: float64)
#[decl @iridiumtype [bytes "(float64, float64) -> float64"]]
export define @primSubFloat(%a: float64, %b: float64) = prim float64_sub(%a: float64, %b: float64)
#[decl @iridiumtype [bytes "(float64, float64) -> float64"]]
export define @primMulFloat(%a: float64, %b: float64) = prim float64_mul(%a: float64, %b: float64)
#[decl @iridiumtype [bytes "(float64, float64) -> float64"]]
export define @primDivFloat(%a: float64, %b: float64) = prim float64_div(%a: float64, %b: float64)

#[decl @iridiumtype [bytes "(float64) -> float64"]]
export define @primNegFloat(%a: float64): float64 {
entry:
  %0 = literal float64 0
  %result = prim float64_sub(%0: float64, %a: float64)
  return %result: float64
}

#[decl @iridiumtype [bytes "(float64, float64) -> @Bool"]]
export define @primEqFloat(%a: float64, %b: float64): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim float64_eq(%a: float64, %b: float64, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(float64, float64) -> @Bool"]]
export define @primNeFloat(%a: float64, %b: float64): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim float64_ne(%a: float64, %b: float64, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}


#[decl @iridiumtype [bytes "(float64, float64) -> @Bool"]]
export define @primLtFloat(%a: float64, %b: float64): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim float64_lt(%a: float64, %b: float64, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(float64, float64) -> @Bool"]]
export define @primGtFloat(%a: float64, %b: float64): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim float64_gt(%a: float64, %b: float64, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(float64, float64) -> @Bool"]]
export define @primLeFloat(%a: float64, %b: float64): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim float64_le(%a: float64, %b: float64, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @iridiumtype [bytes "(float64, float64) -> @Bool"]]
export define @primGeFloat(%a: float64, %b: float64): @Bool {
entry:
  letalloc %true_ = constructor @True: () -> @Bool $ ()
  letalloc %false_ = constructor @False: () -> @Bool $ ()
  %true = cast %true_: @Bool as any_whnf
  %false = cast %false_: @Bool as any_whnf
  %result = prim float64_ge(%a: float64, %b: float64, %true: any_whnf, %false: any_whnf)
  %result_ = cast %result: any_whnf as @Bool
  return %result_: @Bool
}

#[decl @type [bytes "a -> b -> b"]]
export define @primSeq(%a: any, %b: any): any_whnf [trampoline] {
entry:
  %a_whnf = eval %a: any
  %b_whnf = eval %b: any
  %c = seq %a_whnf: any_whnf, %b_whnf: any_whnf
  return %c: any_whnf
}

#[decl @type [bytes "a -> b -> b"]]
export define @primPseq(%a: any, %b: any): any_whnf [trampoline] {
entry:
  %a_whnf = eval %a: any
  %c = seq %a_whnf: any_whnf, %b: any
  %c_whnf = eval %c: any
  return %c_whnf: any_whnf
}
