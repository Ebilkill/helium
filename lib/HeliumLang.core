{- The (type) constructors and functions in this module are
   used in the translation of language constructs.
-} 

module HeliumLang
    ( Bool(True, False)
    , '':[]''('':[]'', (:)) -- lists
    , '':()''('':()'') -- unit tuple
    , '':->'' -- function arrow
    , String, Int, Float, Char
    , PackedString

    , showChar, showString, showInt, showBool, showUnit, showFloat  
    
    , ''$primPutStrLn'' -- inserted main
    , ''$primPutChar'', ''$primPutStr'' -- necessary for ''$primPutStrLn''
    , bindIO -- do-notation
    , ''$primUnsafePerformIO'' -- inserted main
    , ''$primPatternFailPacked'' -- pattern-match failed runtime error
    , ''$primEnumFrom'', ''$primEnumFromThen'', ''$primEnumFromTo'', ''$primEnumFromThenTo'' -- [1..] etc
    , ''$primNegFloat'' -- unary minus for Expression_NegateFloat. Unnecessary in overloaded Helium?
    , ''$primStringToFloat'' -- float literals
    , ''$primEqFloat'' -- pattern-matching on floats
    , ''$primConcat'' -- derived show functions 
    , ''$primConcatMap'' -- list comprehensions
    , ''$primPackedToString'' -- string literals and the built-in string  "No main defined..." and derived shows

    , negFloat, negInt
    , ''$floatUnaryMinus''
    ) where

import LvmLang 
    ( Int(), Float(), IO(IO)
    , type String
    , type PackedString
    , Bool(True, False)
    , '':[]''('':[]'', (:))
    , '':()''('':()'')
    , bindIO, returnIO
    -- , ''$primEqFloat'' = (==.)
    , (+#), (-#), (>#), (<#), (>=#), quot, rem, (==#)
    , stringFromPacked
    , unsafePerformIO  
    , negInt --, negFloat  
    , seq
    )
{- import LvmIO
    ( stdin, stdout, stderr, flush, outputChar, outputPacked
    ) -}
import LvmException
    ( errorPacked
    , patternFailPacked
    )

{----------------------------------------------------------
  Fixities
----------------------------------------------------------}
custom infix (:) : public [5,"right"]

{--------------------------------------------------------------------------
  Built into the language
--------------------------------------------------------------------------}

{----------------------------------------------------------
  Basic data types
----------------------------------------------------------}
data '':->'' v$0 v$1
-- Daan has type Char = Int
data Char

''$primPackedToString'' :: PackedString -> String
''$primPackedToString'' = \p: String -> stringFromPacked p

''$primUnsafePerformIO'' :: forall v$0. IO v$0 -> v$0
''$primUnsafePerformIO'' = forall v$0. \io: IO v$0 -> unsafePerformIO {v$0} io

''$primPatternFailPacked'' :: PackedString -> v$0
''$primPatternFailPacked'' = \p: String -> patternFailPacked p

''$primErrorPacked'' :: PackedString -> v$0
''$primErrorPacked'' = \p: String -> errorPacked p

{-
''$primPutChar'' :: Char -> IO ()
''$primPutChar'' c = 
    bindIO 
        (outputChar stdout c) 
        (flush stdout)
        
''$primPutChars'' :: String -> IO ()
''$primPutChars'' xs = 
    case xs of {
        '':[]''  -> returnIO '':()'' ;
        (:) y ys -> bindIO 
                        (''$primPutChar'' y) -- if you don't want to flush each character: (outputChar stdout y) 
                        (''$primPutChars'' ys) }

''$primPutStr'' :: String -> IO ()
''$primPutStr'' xs = 
    bindIO 
        (''$primPutChars'' xs) 
        (flush stdout)

''$primPutStrLn'' :: String -> IO ()
''$primPutStrLn'' xs = 
    bindIO  
        (''$primPutChars'' xs) 
        (''$primPutChar'' '\n') -- does the flush
-}

''$primConcat'' :: forall v$0. [[v$0]] -> [v$0]
''$primConcat'' = forall v$0. \xss: [[v$0]] ->
    case xss of 
    {   '':[]'' -> []
    ;   (:) ys yss -> ''$primAppend'' ys (''$primConcat'' yss)
    }

''$primConcatMap'' :: forall v$0. forall v$1. (v$0 -> [v$1]) -> [v$0] -> [v$1]
''$primConcatMap'' = forall v$0. forall v$1. \f: (v$0 -> [v$1]) -> \xs: [v$0] ->
    case xs of
    {   '':[]''  -> []
    ;   (:) y ys -> ''$primAppend'' (f y) (''$primConcatMap'' f ys)
    }
    
''$primAppend'' :: forall v$0. [v$0] -> [v$0] -> [v$0] -- is '++'
''$primAppend'' = forall v$0. \xs: [v$0] -> \ys: [v$0] ->
    case xs of 
    {   '':[]'' -> ys
    ;   (:) z zs -> (:) z (''$primAppend'' zs ys)
    }

-- Show

showBool :: Bool -> String
showBool = \b: Bool -> 
    case b of
    {   True -> "True"
    ;   default -> "False"
    }

showUnit :: () -> String
showUnit = \u: () -> 
    case u of
    {   '':()'' -> "()"
    }

showChar :: Char -> String
showChar = \c: Char ->
    (:) '\'' (''$primAppend'' (safeShowChar True c) 
                         [ '\'' ])

safeShowChar :: Bool -> Char -> String
safeShowChar = \inChar: Bool -> \c: Char -> 
    case c of
    { '\a' -> stringFromPacked "\\a"
    ; '\b' -> stringFromPacked "\\b"
    ; '\f' -> stringFromPacked "\\f"
    ; '\n' -> stringFromPacked "\\n"
    ; '\r' -> stringFromPacked "\\r"
    ; '\t' -> stringFromPacked "\\t"
    ; '\\' -> stringFromPacked "\\\\"
    ; '\'' -> case inChar of { True -> stringFromPacked "\\'"
                             ; default -> [c]
                             }
    ; '\"' -> case inChar of { True -> [c]
                             ; default -> stringFromPacked "\\\""
                             }
    ; default -> 
        let! geq32: Bool = (>=#) c 32 in case geq32 of
        {   True -> let! lt127: Bool = (<#) c 127 in case lt127 of
            {   True -> [c]
            ;   default -> (:) '\\' (showInt c)
            }
        ;   default -> (:) '\\' (showInt c)
        }
    }

showString :: String -> String
showString = \s: String -> 
    (:) '\"' (''$primAppend'' (''$primConcatMap'' (safeShowChar False) s) 
                         (stringFromPacked "\""))

showInt :: Int -> String
showInt = \n: Int ->
    let! isNeg: Bool = (<#) n 0 in case isNeg of
    {   True -> (:) '(' ((:) '-' 
                    (''$primAppend'' 
                        (showPositiveInt (negInt n)) 
                        (stringFromPacked ")")
                    ))
    ;   default -> showPositiveInt n
    } 

showPositiveInt :: Int -> String
showPositiveInt = \i: Int ->
    let 
        rest: Int = quot i 10
        digit: Int = [ (+#) '0' (rem i 10) ]
        done: Bool = (==#) rest 0
    in
        case done of
        {   True -> digit 
        ;   default -> ''$primAppend'' (showPositiveInt rest) digit
        }

commaList :: [String] -> String
commaList = \list: [String] ->
    case list of
    {   '':[]''  -> []
    ;   (:) x xs ->
        case xs of
        { '':[]'' -> x 
        ; default -> ''$primAppend'' x (''$primConcatMap'' (''$primAppend'' [ ',' ]) xs)
        }
    }

-- Float
{-
''$primNegFloat''   :: Float -> Float!
''$primNegFloat''   = negFloat

''$primStringToFloat'' :: String -> Float
''$primStringToFloat'' = float_of_string_extern
extern float_of_string_extern "float_of_string" :: "Fz"
''$primShowFloat'' :: Float -> String
''$primShowFloat'' x = let! x = x in stringFromPacked (stringFromFloat x 6 'g')
extern stringFromFloat "string_of_float" :: "aFII"
-}
-- in overloaded version, a negative float is shown as usual (not with "-.")
--showFloat : public [custom "type"  ["Float -> String"]]
--  = \f -> addPointZero (''$primShowFloat'' f)

{- 
safeMinus : private [custom "type"  ["String -> String"]]
  = \s  -> 
    case s of
    { (:) x xs -> 
        case x of 
        { '-' -> ''$primAppend'' (stringFromPacked "(-.") (''$primAppend'' xs (stringFromPacked ")"))
        ; _   -> s
        }
    ; _ -> s
    }
-}
{-
addPointZero : private [custom "type"  ["String -> String"]]
    = \s: String ->
        let! cond: Bool = hasPointOrE s in case cond of
        { True -> s
        ; default -> ''$primAppend'' s (stringFromPacked ".0")
        }
        
hasPointOrE : private []
    = \xs: String ->
    case xs of
    { [] -> False
    ; (:) y ys ->
        case y of 
        { '.' -> True
        ; 'e' -> True
        ; default -> hasPointOrE ys
        }
    }
-}
