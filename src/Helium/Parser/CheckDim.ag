-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Check if some dimension / unit constructs occurs
--
-----------------------------------------------------------------------------

INCLUDE "UHA_Syntax.ag"

imports{
-- Below two imports are to avoid clashes of "list" as used by the AG system.
-- Effectively, only list from the imported library needs to be qualified.
import Prelude hiding ((<$>))
import Text.PrettyPrint.Leijen hiding (list)
import qualified Text.PrettyPrint.Leijen as PPrint
import Data.Char
import Top.Types (isTupleConstructor)

import Helium.Syntax.UHA_Syntax
import Helium.Utils.Utils (internalError, hole)

}

{
select :: Maybe (Int, Int) -> Maybe (Int, Int) -> Maybe (Int, Int)
select Nothing a = a
select a _ = a

select3 :: Maybe (Int, Int) -> Maybe (Int, Int) -> Maybe (Int, Int) -> Maybe (Int, Int)
select3 Nothing a b = select a b
select3 a _ _ = a
}

ATTR
    Module Body
    Declaration
    Type ContextItem
    MaybeUnit MaybeExpression
    Constructor
    FieldDeclaration
    AnnotatedType
    Expression
    Statement
    Qualifier
    Alternative
    RecordExpressionBinding
    FunctionBinding
    GuardedExpression RightHandSide
    GuardedExpressions
    Constructors Declarations Types ContextItems
    FieldDeclarations AnnotatedTypes Expressions
    Statements Qualifiers Alternatives RecordExpressionBindings 
    FunctionBindings
    MaybeDeclarations
    [
    |
    | dimconstruct : {Maybe (Int, Int)}
    ]

ATTR Unit Range Position
    [
    |
    | pos : {(Int,Int)}
    ]
-- ------------------------------------------------------------------------
-- -- Modules                                                            --
-- ------------------------------------------------------------------------

SEM Module
    | Module lhs.dimconstruct = @body.dimconstruct
    --  range                    : Range
    --  name                     : MaybeName
    --  exports                  : MaybeExports
    --  body                     : Body

SEM Body
    | Hole                     lhs.dimconstruct = Nothing
    | Body                     lhs.dimconstruct = @declarations.dimconstruct
    --  range                    : Range
    --  importdeclarations       : ImportDeclarations
    --  declarations             : Declarations

-- ------------------------------------------------------------------------
-- -- Declarations                                                       --
-- ------------------------------------------------------------------------

SEM MaybeDeclarations
    | Nothing       lhs.dimconstruct = Nothing      
    | Just          lhs.dimconstruct = @declarations.dimconstruct
    --  declarations             : Declarations

SEM Declarations
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing
 
SEM Declaration  
    | Hole              lhs.dimconstruct = Nothing
    | Type              lhs.dimconstruct = @type.dimconstruct
    --  range                    : Range
    --  simpletype               : SimpleType
    --  type                     : Type
    | Data              lhs.dimconstruct = select (@context.dimconstruct) (@constructors.dimconstruct)
    --  range                    : Range        {- *** -}
    --  context                  : ContextItems
    --  simpletype               : SimpleType
    --  constructors             : Constructors
    --  derivings                : Names
    | Newtype           lhs.dimconstruct = select (@context.dimconstruct) (@constructor.dimconstruct)
    --  range                    : Range
    --  context                  : ContextItems
    --  simpletype               : SimpleType
    --  constructor              : Constructor  -- has only one field, no strictness
    --  derivings                : Names
    | Dimension         lhs.dimconstruct = Just @range.pos
    | UnitFromUnit      lhs.dimconstruct = Just @range.pos
    | AliasDimension    lhs.dimconstruct = Just @range.pos
    | AliasUnit         lhs.dimconstruct = Just @range.pos
    | Class             lhs.dimconstruct = select (@context.dimconstruct) (@where.dimconstruct)
    --  range                    : Range
    --  context                  : ContextItems -- is a "simple" context
    --  simpletype               : SimpleType   -- Haskell 98 allows only one variable
    --  where                    : MaybeDeclarations -- cannot have everything
    | Instance          lhs.dimconstruct = select3 (@context.dimconstruct) (@types.dimconstruct) (@where.dimconstruct)
    --  range                    : Range
    --  context                  : ContextItems -- is a "simple" context
    --  name                     : Name
    --  types                    : Types        -- Haskell 98 allows only one type
                                                -- that is severely restricted
    --  where                    : MaybeDeclarations -- cannot have everything
    | Default           lhs.dimconstruct = @types.dimconstruct
    --  range                    : Range
    --  types                    : Types        -- should be instances of Num
    | FunctionBindings  lhs.dimconstruct = @bindings.dimconstruct
    --  range                    : Range          {- *** -}
    --  bindings                 : FunctionBindings -- should all be for the same function
    | PatternBinding    lhs.dimconstruct = @righthandside.dimconstruct
    --  range                    : Range
    --  pattern                  : Pattern
    --  righthandside            : RightHandSide
    | TypeSignature     lhs.dimconstruct = @type.dimconstruct
    --  range                    : Range
    --  names                    : Names
    --  type                     : Type   -- may have context
    | Fixity            lhs.dimconstruct = Nothing
    | Empty             lhs.dimconstruct = Nothing

-- ------------------------------------------------------------------------
-- -- Types                                                              --
-- ------------------------------------------------------------------------

SEM Types
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM Type                                         {- *** -}
    | Application              lhs.dimconstruct = @arguments.dimconstruct
    --  range                    : Range
    --  prefix                   : Bool
    --  function                 : Type 
    --  arguments                : Types
    | Variable                 lhs.dimconstruct = @unit.dimconstruct
    --  range                    : Range
    --  name                     : Name
    --  unit                     : MaybeUnit
    | Constructor              lhs.dimconstruct = @unit.dimconstruct
    --  range                    : Range
    --  name                     : Name
    --  unit                     : MaybeUnit
    | Qualified                lhs.dimconstruct =  select (@context.dimconstruct) (@type.dimconstruct)
    --  range                    : Range
    --  context                  : ContextItems
    --  type                     : Type
    | Forall                   lhs.dimconstruct = @type.dimconstruct
    --  range                    : Range
    --  typevariables            : Names  forall a b . Num a => a
    --  type                     : Type
    | Exists                   lhs.dimconstruct = @type.dimconstruct
    --  range                    : Range
    --  typevariables            : Names
    --  type                     : Type
    | Parenthesized            lhs.dimconstruct = @type.dimconstruct
    --  range                    : Range
    --  type                     : Type

SEM ContextItems
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM ContextItem
    | ContextItem       lhs.dimconstruct = @types.dimconstruct
    --  range                    : Range
    --  name                     : Name   -- that is the class
    --  types                    : Types  -- in Haskell 98, this is only one type

SEM Constructors
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM Constructor
    | Constructor       lhs.dimconstruct = @types.dimconstruct
    --  range                    : Range
    --  constructor              : Name
    --  types                    : AnnotatedTypes
    | Infix             lhs.dimconstruct = select (@leftType.dimconstruct) (@rightType.dimconstruct)
    --  range                    : Range
    --  leftType                 : AnnotatedType
    --  constructorOperator      : Name
    --  rightType                : AnnotatedType
    | Record            lhs.dimconstruct = @fieldDeclarations.dimconstruct
    --  range                    : Range
    --  constructor              : Name
    --  fieldDeclarations        : FieldDeclarations

SEM FieldDeclarations
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM FieldDeclaration
    | FieldDeclaration lhs.dimconstruct = @type.dimconstruct
    --  range                    : Range
    --  names                    : Names
    --  type                     : AnnotatedType        

SEM AnnotatedTypes
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM AnnotatedType
    | AnnotatedType   lhs.dimconstruct = @type.dimconstruct
    --  range                    : Range
    --  strict                   : Bool
    --  type                     : Type

-- ------------------------------------------------------------------------
-- -- Dimensions and Units                                               --
-- ------------------------------------------------------------------------

SEM MaybeUnit
    | Nothing                lhs.dimconstruct = Nothing
    | Just                   lhs.dimconstruct = Just @unit.pos
    -- unit                      : Unit

SEM Unit
    | Base  loc.pos = @range.pos
    | Times loc.pos = @range.pos
    | Div loc.pos = @range.pos
    | Power loc.pos = @range.pos
    | NegPower loc.pos = @range.pos
    | Parenthesized loc.pos = @range.pos
    | One loc.pos = @range.pos

-- ------------------------------------------------------------------------
-- -- Expressions                                                        --
-- ------------------------------------------------------------------------

SEM Expressions
    | Cons                lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil                 lhs.dimconstruct = Nothing

SEM MaybeExpression
    | Nothing             lhs.dimconstruct = Nothing
    | Just                lhs.dimconstruct = @expression.dimconstruct
    --  expression               : Expression

SEM Expression                                   {- *** -}
    | Hole               lhs.dimconstruct = Nothing
    | Literal            lhs.dimconstruct = Nothing
    | Variable           lhs.dimconstruct = Nothing
    | Constructor        lhs.dimconstruct = Nothing
    | Parenthesized      lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  expression               : Expression
    | NormalApplication  lhs.dimconstruct = select (@function.dimconstruct) (@arguments.dimconstruct)
    --  range                    : Range
    --  function                 : Expression
    --  arguments                : Expressions
    | InfixApplication   lhs.dimconstruct = select3 (@leftExpression.dimconstruct) (@operator.dimconstruct) (@rightExpression.dimconstruct)
    --  range                    : Range
    --  leftExpression           : MaybeExpression
    --  operator                 : Expression
    --  rightExpression          : MaybeExpression
    | If                 lhs.dimconstruct = select3 (@guardExpression.dimconstruct) (@thenExpression.dimconstruct) (@elseExpression.dimconstruct)
    --  range                    : Range
    --  guardExpression          : Expression
    --  thenExpression           : Expression
    --  elseExpression           : Expression
    | Lambda             lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  patterns                 : Patterns
    --  expression               : Expression
    | Case               lhs.dimconstruct = select (@expression.dimconstruct) (@alternatives.dimconstruct)
    --  range                    : Range
    --  expression               : Expression
    --  alternatives             : Alternatives
    | Let                lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  declarations             : Declarations
    --  expression               : Expression
    | Do                 lhs.dimconstruct = @statements.dimconstruct
    --  range                    : Range
    --  statements               : Statements
    | List               lhs.dimconstruct = @expressions.dimconstruct
    --  range                    : Range
    --  expressions              : Expressions
    | Tuple              lhs.dimconstruct = @expressions.dimconstruct
    --  range                    : Range
    --  expressions              : Expressions
    | Comprehension      lhs.dimconstruct = select (@expression.dimconstruct) (@qualifiers.dimconstruct)
    --  range                    : Range
    --  expression               : Expression
    --  qualifiers               : Qualifiers
    | Typed              lhs.dimconstruct = select (@expression.dimconstruct) (@type.dimconstruct)
    --  range                    : Range
    --  expression               : Expression
    --  type                     : Type
    | Dimensioned        lhs.dimconstruct = Just @range.pos
    --  range                    : Range
    --  expression               : Expression
    --  unit                     : Unit
    | RecordConstruction lhs.dimconstruct = @recordExpressionBindings.dimconstruct
    --  range                    : Range
    --  name                     : Name
    --  recordExpressionBindings : RecordExpressionBindings
    | RecordUpdate       lhs.dimconstruct = Nothing -- see RecordExpressionBindings
    --  range                    : Range
    --  expression               : Expression
    --  recordExpressionBindings : RecordExpressionBindingsconstructors
    | Enum               lhs.dimconstruct = select3 (@from.dimconstruct) (@then.dimconstruct) (@to.dimconstruct)
    --  range                    : Range
    --  from                     : Expression
    --  then                     : MaybeExpression
    --  to                       : MaybeExpression
    | Negate             lhs.dimconstruct = @expression.dimconstruct
    | NegateFloat        lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  expression               : Expression

SEM Statements
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM Statement
    | Expression          lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  expression               : Expression
    | Let                 lhs.dimconstruct = @declarations.dimconstruct
    --  range                    : Range
    --  declarations             : Declarations
    | Generator           lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  pattern                  : Pattern
    --  expression               : Expression
    | Empty               lhs.dimconstruct = Nothing

SEM Qualifiers
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM Qualifier
    | Guard               lhs.dimconstruct = @guard.dimconstruct
    --  range                    : Range
    --  guard                    : Expression -- type: Boolean
    | Let                 lhs.dimconstruct = @declarations.dimconstruct
    --  range                    : Range
    --  declarations             : Declarations
    | Generator           lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  pattern                  : Pattern
    --  expression               : Expression
    | Empty               lhs.dimconstruct = Nothing
    --  range                    : Range

SEM Alternatives
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM Alternative
    | Hole                lhs.dimconstruct = Nothing
    | Alternative         lhs.dimconstruct = @righthandside.dimconstruct
    --  range                    : Range
    --  pattern                  : Pattern
    --  righthandside            : RightHandSide
    | Empty               lhs.dimconstruct = Nothing
    --  range                    : Range

SEM GuardedExpressions
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM GuardedExpression -- ToDo: or _Guard?
    | GuardedExpression   lhs.dimconstruct = select (@guard.dimconstruct) (@expression.dimconstruct)
    --  range                    : Range
    --  guard                    : Expression -- type: Boolean
    --  expression               : Expression

SEM RecordExpressionBindings
    | Cons              lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil               lhs.dimconstruct = Nothing

SEM RecordExpressionBinding
    | RecordExpressionBinding lhs.dimconstruct = @expression.dimconstruct
    --  range                    : Range
    --  name                     : Name
    --  expression               : Expression

SEM FunctionBindings
    | Cons                lhs.dimconstruct =  select (@hd.dimconstruct) (@tl.dimconstruct)
    | Nil                 lhs.dimconstruct = Nothing

SEM FunctionBinding
    | Hole                lhs.dimconstruct = Nothing
    | FunctionBinding     lhs.dimconstruct = @righthandside.dimconstruct
    --  range                    : Range
    --  lefthandside             : LeftHandSide
    --  righthandside            : RightHandSide

SEM RightHandSide
    | Expression          lhs.dimconstruct = select (@expression.dimconstruct) (@where.dimconstruct)
    --  range                    : Range
    --  expression               : Expression
    --  where                    : MaybeDeclarations
    | Guarded             lhs.dimconstruct = select (@guardedexpressions.dimconstruct) (@where.dimconstruct)
    --  range                    : Range
    --  guardedexpressions       : GuardedExpressions
    --  where                    : MaybeDeclarations

SEM Range
    | Range             loc.pos = @start.pos

SEM Position
    | Position          loc.pos = (@line,@column)
    | Unknown           loc.pos = (0,0)